package ru.nsu.fit.oop.melnikov.prime.numbers.benchmark.test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import org.knowm.xchart.BitmapEncoder;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYChartBuilder;

/**
 * Class that draws a chart of benchmark tests using generated by jmh .json-file.
 */
public class ChartDrawer {

  public static void main(String[] args) {

    ObjectMapper mapper = new ObjectMapper();

    JsonNode jsonNodeRoot;
    try {
      jsonNodeRoot = mapper.readTree(
          new File("results.json")
      );
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    Map<String, Map<Integer, Double>> testCountMap = new HashMap<>();
    Map<String, Map<Integer, Double>> threadCountMap = new HashMap<>();

    for (JsonNode node : jsonNodeRoot) {
      String test = node.get("benchmark").asText();
      test = test.substring(test.lastIndexOf(".") + 1);

      if (node.path("params").has("threadCount")) {
        makeMap(node, threadCountMap, test, "threadCount");
      }
      else if(node.path("params").has("size")) {
        makeMap(node, testCountMap, test, "size");
      }
    }

    XYChart testCountChart = new XYChartBuilder()
        .title("Benchmark test count")
        .xAxisTitle("array size")
        .yAxisTitle("score, ops/s").build();
    testCountChart.getStyler().setXAxisLogarithmic(true);
    testCountChart.getStyler().setYAxisLogarithmic(true);

    XYChart threadCountChart = new XYChartBuilder()
        .title("Benchmark thread count")
        .xAxisTitle("count of threads")
        .yAxisTitle("score, ops/s").build();

    makeChart(testCountChart, testCountMap, "Benchmark_test_count");
    makeChart(threadCountChart, threadCountMap, "Benchmark_thread_count");

  }

  private static void makeMap(
      @NotNull JsonNode node,
      @NotNull Map<String, Map<Integer, Double>> chart,
      String test, String param
  ) {
    int value = node.path("params").get(param).asInt();

    if (!chart.containsKey(test)) {
      chart.put(test, new HashMap<>());
    }

    chart.get(test).put(
        value,
        node.path("primaryMetric").get("score").asDouble()
    );
  }

  private static void makeChart(
      XYChart chart,
      @NotNull Map<String, Map<Integer, Double>> charts,
      String chartName
  ) {

    for (String testName : charts.keySet()) {
      List<Integer> sizeData = charts.get(testName).keySet().stream().sorted().toList();
      List<Double> scoreData = sizeData.stream().map(x -> charts.get(testName).get(x)).toList();
      chart.addSeries(testName, sizeData, scoreData);
    }

    try {
      BitmapEncoder.saveBitmapWithDPI(
          chart,
          "./"+ chartName + " result.png",
          BitmapEncoder.BitmapFormat.PNG,
          300
      );
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

}

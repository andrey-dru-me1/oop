I want a pie!
pispispit

The read() function reads data previously written to a file.  If any
       portion of a regular file prior to the end-of-file has not been written,
       read() returns bytes with value 0.  For example, lseek(2) allows the file
       offset to be set beyond the end of existing data in the file. If data is
       later written at this intPoint, subsequent reads in the gap between the
       previous end of data and the newly written data will return bytes with
       value 0 until data is written into the gap.


       For regular files, no data transfer will occur past the offset maximum
       established in the open file description associated with fildes.


       Upon successful completion, where nbyte is greater than 0, read() will
       mark for update the st_atime field of the file, and return the number of
       bytes read. This number will never be greater than nbyte. The value
       returned may be less than nbyte if the number of bytes left in the file
       is less than nbyte, if the read() request was interrupted by a signal, or
       if the file is a pipe or FIFO or special file and has fewer than nbyte
       bytes immediately available for reading.  For example, a read() from a
       file associated with a terminal may return one typed line of data.


       If a read() is interrupted by a signal before it reads any data, it will
       return -1 with errno set to EINTR.


       If a read() is interrupted by a signal after it has successfully read
       some data, it will return the number of bytes read.


       A read() from a streams file can read data in three different modes:
       byte-stream mode, message-nondiscard mode, and message-discard mode.  The
       default is byte-stream mode.  This can be changed using the I_SRDOPT
       ioctl(2) request, and can be tested with the I_GRDOPT ioctl(). In byte-
       stream mode, read() retrieves data from the stream until as many bytes as
       were requested are transferred, or until there is no more data to be
       retrieved.  Byte-stream mode ignores message boundaries.


       In streams message-nondiscard mode, read() retrieves data until as many
       bytes as were requested are transferred, or until a message boundary is
       reached.  If read() does not retrieve all the data in a message, the
       remaining data is left on the stream, and can be retrieved by the next
       read() call.  Message-discard mode also retrieves data until as many
       bytes as were requested are transferred, or a message boundary is
       reached.  However, unread data remaining in a message after the  read()
       returns is discarded, and is not available for a subsequent read(),
       readv() or getmsg(2) call.


       How read() handles zero-byte streams messages is determined by the
       current read mode setting.  In byte-stream mode, read() accepts data
       until it has read nbyte bytes, or until there is no more data to read, or
       until a zero-byte message block is encountered. The read() function then
       returns the number of bytes read, and places the zero-byte message back
       on the stream to be retrieved by the next read(), readv() or getmsg(2).
       In message-nondiscard mode or message-discard mode, a zero-byte message
       returns 0 and the message is removed from the stream.  When a zero-byte
       message is read as the first message on a stream, the message is removed
       from the stream and 0 is returned, regardless of the read mode.


       A read() from a streams file returns the data in the message at the front
       of the stream head read queue, regardless of the priority band of the
       message.


       By default, streams are in control-normal mode, in which a read() from a
       streams file can only process messages that contain a data part but do
       not contain a control part.  The read() fails if a message containing a
       control part is encountered at the stream head.  This default action can
       be changed by placing the stream in either control-data mode or control-
       discard mode with the I_SRDOPT ioctl() command.  In control-data mode,
       read() converts any control part to data and passes it to the application
       before passing any data part originally present in the same message.  In
       control-discard mode, read() discards message control parts but returns
       to the process any data part in the message.


       In addition, read() and readv() will fail if the stream head had
       processed an asynchronous error before the call.  In this case, the value
       of errno does not reflect the result of read() or readv() but reflects
       the prior error. If a hangup occurs on the stream being read, read()
       continues to operate normally until the stream head read queue is empty.
       Thereafter, it returns 0.


       If an asynchronous error occurs on a socket, it is possible for the
       read() and readv() functions to return an asynchronous error, just as in
       the STREAMS case described above. This might occur, for example, if a TCP
       socket that is using TCP keep-alive is closed due to failing the keep-
       alive check.

   readv()
       The readv() function is equivalent to read(), but places the input data
       into the iovcnt buffers specified by the members of the iov array:
       iov[0], iov[1], ..., iov[iovcnt-1]. The iovcnt argument is valid if
       greater than 0 and less than or equal to {IOV_MAX}.


       The iovec structure contains the following members:

         caddr_t   iov_base;
         int       iov_len;


       Each iovec entry specifies the base address and length of an area in
       memory where data should be placed.  The readv() function always fills an
       area completely before proceeding to the next.


       Upon successful completion, readv() marks for update the st_atime field
       of the file.

   pread()
       The pread() function performs the same action as read(), except that it
       reads from a given position in the file without changing the file
       pointer. The first three arguments to pread() are the same as read() with
       the addition of a fourth argument offset for the desired position inside
       the file. pread() will read up to the maximum offset value that can be
       represented in an off_t for regular files. An attempt to perform a
       pread() on a file that is incapable of seeking results in an error.

   preadv()
       The preadv() function performs the same action as readv() except it reads
       from a given position in the file without changing the file pointer. The
       first three arguments are the same as readv() with the addition of a
       fourth argument offset for the desired position inside the file.
       preadv() will read up to the maximum offset value that can be represented
       in an off_t for regular files. An attempt to perform a preadv() on a file
       that is incapable of seeking results in an error.